// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  tokens        Int       @default(100) // Novo campo de tokens!
  accounts      Account[]
  sessions      Session[]
  chats         Chat[] // Relação com os chats do usuário
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// NOVO MODELO PARA OS CHATS
model Chat {
  id        String   @id @default(cuid())
  name      String   @default("Novo Chat")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  htmlCode  String   @default("<div id=\"root\"></div>") @db.Text
  cssCode   String   @default("/* Estilos CSS */") @db.Text
  jsxCode   String   @default("const App = () => <h1>Bem-vindo!</h1>;\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);") @db.Text
  filesJson Json? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}