'use client';
import UserNav from "./UserNav";
import { Button } from "@/components/ui/button";
import { Zap, Settings, Github, Share2, DownloadCloud } from "lucide-react";
import { useCallback } from "react";
import JSZip from "jszip";
import { saveAs } from "file-saver";
import Link from "next/link";

interface NavbarProps {
  // Estas props não serão mais usadas diretamente para exportação aqui,
  // pois a exportação será delegada ao Sandbox ou a um estado global.
  // Mantenho para compatibilidade, mas idealmente seriam removidas se a exportação for centralizada.
  htmlCode?: string;
  cssCode?: string;
  jsxCode?: string;
}

export default function Navbar({ htmlCode, cssCode, jsxCode }: NavbarProps) {
  const currentChatName = "Meu Projeto Next.js"; // Exemplo, idealmente viria de um contexto

  // A função de exportação agora delega a responsabilidade ou assume um estado global de arquivos.
  // Para simplificar, vou replicar a lógica do Sandbox aqui, mas o ideal seria um Context API
  // ou Redux para gerenciar os arquivos gerados centralmente.
  const handleExportZip = async () => {
    const zip = new JSZip();

    // Como a Navbar não tem acesso direto aos 'generatedFiles' do Sandbox,
    // vamos usar os 'jsxCode' e 'cssCode' como 'app/page.tsx' e 'app/globals.css'
    // e adicionar os arquivos padrão de um Next.js.
    // Em um projeto real, você passaria os 'generatedFiles' para a Navbar via Context.

    // Adiciona os arquivos padrão de um projeto Next.js
    zip.file("package.json", `{
  "name": "my-next-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwindcss": "^3.3.0",
    "typescript": "^5.0.0",
    "autoprefixer": "^10.0.0",
    "postcss": "^8.0.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.0.0"
  }
}`);
    zip.file("tsconfig.json", `{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}`);
    zip.file("next.config.ts", `/** @type {import('next').NextConfig} */
const nextConfig = {};
module.exports = nextConfig;`);
    zip.file("postcss.config.mjs", `/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
export default config;`);
    zip.file("tailwind.config.ts", `import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
  plugins: [],
};
export default config;`);
    zip.file("app/layout.tsx", `import './globals.css';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Generated by Libelula',
  description: 'Generated by Libelula AI',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang=\"en\">
      <body className={inter.className}>{children}</body>
    </html>
  );
}`);
    zip.file("app/globals.css", cssCode || `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(to bottom, transparent, rgb(var(--background-end-rgb))) rgb(var(--background-start-rgb));
}`);
    zip.file("app/page.tsx", jsxCode || `'use client';
import React from 'react';

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <h1 className="text-4xl font-bold text-center">Projeto Next.js Gerado</h1>
      <p className="text-lg text-center mt-4">Edite app/page.tsx para começar!</p>
    </main>
  );
}`);


    const content = await zip.generateAsync({ type: "blob" });
    saveAs(content, "libelula-nextjs-project.zip");
  };

  return (
    <header className="sticky top-0 z-50 w-full border-b border-border bg-background h-14 flex items-center">
      <div className="container flex max-w-screen-2xl items-center justify-between px-4">
        {/* Lado Esquerdo da Navbar */}
        <div className="flex items-center space-x-3">
          <Link href="/dashboard" className="flex items-center space-x-2">
            <Zap className="h-6 w-6 text-primary" />
            <span className="font-semibold text-lg text-foreground hidden sm:inline-block">
              Libelula
            </span>
          </Link>
          <span className="text-muted-foreground text-sm hidden md:inline">/</span>
          <div className="hidden md:flex items-center space-x-2">
            <Button variant="ghost" size="sm" className="px-2">Personal</Button> 
            <span className="px-1.5 py-0.5 text-xs font-medium bg-green-600/20 text-green-400 rounded-full">Free</span>
          </div>
          <span className="text-muted-foreground text-sm hidden lg:inline">/</span>
          <span className="text-sm text-foreground hidden lg:inline-block truncate max-w-[200px]">{currentChatName}</span>
          <span className="px-1.5 py-0.5 text-xs font-medium bg-secondary text-secondary-foreground rounded-md hidden lg:inline-block">Private</span>
        </div>

        {/* Lado Direito da Navbar */}
        <div className="flex items-center space-x-2">
          <Button variant="ghost" size="icon" title="Configurações">
            <Settings className="h-4 w-4 text-muted-foreground" />
          </Button>
          <Button variant="ghost" size="icon" title="Compartilhar">
            <Share2 className="h-4 w-4 text-muted-foreground" />
          </Button>
          <UserNav />
          <Button onClick={handleExportZip} size="sm" className="bg-primary hover:bg-primary/90 text-primary-foreground">
            <DownloadCloud className="mr-2 h-4 w-4" />
            Exportar
          </Button>
        </div>
      </div>
    </header>
  );
}
